// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export interface Task {
  id: number;
  title: string;
  description: string;
  status: number;
  error?: string;
}

interface TaskApiResponse {
  tasks: Task[];
}

// Define a service using a base URL and expected endpoints
export const tasksApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:5001" }),
  reducerPath: "taskApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Tasks"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    getTasks: build.query<TaskApiResponse, void>({
      query: () => `/tasks`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error) => [{ type: "Tasks"}],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetTasksQuery } = tasksApiSlice;
